import threading
import time

import rclpy
from rclpy.node import Node
from rclpy.qos import qos_profile_system_default

from std_msgs.msg import String
from sensor_msgs.msg import Imu, MagneticField

class RobotImu(Node):
    def __init__(self):
        super().__init__('aster_imu_node')
        self.get_logger().info("Aster's IMU node is running")

        self.accel = [0.0, 0.0, 0.0]
        self.gyro = [0.0, 0.0, 0.0]
        self.mag = [0.0, 0.0, 0.0]

        self.create_subscription(
            String,
            '/receive_serial',
            self.get_serial_data,
            qos_profile = qos_profile_system_default
        )

        self.raw_imu_pub = self.create_publisher(
            Imu,
            'imu/data_raw',
            qos_profile = qos_profile_system_default
        )

        self.mag_field_pub = self.create_publisher(
            MagneticField,
            'imu/mag',
            qos_profile = qos_profile_system_default
        )

        self.thread_run = True
        self.thread = threading.Thread(target=self.send_raw_imu, daemon=True)
        self.thread.start()

    def get_serial_data(self, msg):
        data = msg.data.replace("\r\n", "").split(',')
        self.accel = [float(data[0]), float(data[1]), float(data[2])]
        self.gyro = [float(data[3]), float(data[4]), float(data[5])]
        self.mag = [float(data[6]), float(data[7]), float(data[8])]

    def send_raw_imu(self):
        while self.thread_run:
            imu = Imu()
            curr_time = self.get_clock().now().to_msg()

            imu.header.stamp = curr_time
            imu.header.frame_id = "imu_link"

            imu.orientation_covariance[0] = -1

            imu.linear_acceleration.x = self.accel[0] * 9.80665
            imu.linear_acceleration.y = self.accel[1] * 9.80655
            imu.linear_acceleration.z = self.accel[2] * 9.80655

            imu.linear_acceleration_covariance[0] = 0.49
            imu.linear_acceleration_covariance[4] = 0.491
            imu.linear_acceleration_covariance[8] = 0.785

            imu.angular_velocity.x = self.gyro[0] * 0.0174533
            imu.angular_velocity.y = self.gyro[1] * 0.0174533
            imu.angular_velocity.z = self.gyro[2] * 0.0174533

            imu.angular_velocity_covariance[0] = 0.698
            imu.angular_velocity_covariance[4] = 0.698
            imu.angular_velocity_covariance[8] = 0.698

            mag = MagneticField()

            mag.header.stamp = curr_time
            mag.header.frame_id = "imu_link"

            mag.magnetic_field.x = -self.mag[0] / 10**6
            mag.magnetic_field.y = self.mag[1] / 10**6
            mag.magnetic_field.z = -self.mag[2] / 10**6

            mag.magnetic_field_covariance[0] = 0.0
            mag.magnetic_field_covariance[4] = 0.0
            mag.magnetic_field_covariance[8] = 0.0

            self.raw_imu_pub.publish(imu)
            self.mag_field_pub.publish(mag)

def main(args=None):
    rclpy.init(args=args)
    robot_imu = RobotImu()

    try:
        rclpy.spin(robot_imu)
    except:
        robot_imu.thread_run = False

if __name__ == '__main__':
    main()
